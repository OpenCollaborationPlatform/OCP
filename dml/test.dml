 import "Imported.dml"

//comment
 Data {
    .name: "Document"

    property string 	testS: "Hallo"
    property int 	testI: 1
	property bool 	testB: true
	property float	testF 
	property bool  	created: false
	
	const   property int testConst:4
	
	.onPropertyChanged: function(name) {
		if (name == "testF") {
			Document.testI = Math.floor(Document.testF)
		}
	}
	
	event testE: function(a,b) {
		Document.testB = false
	}
	
	event testErrorE: function() {
		Document.nonExistent()
	}
	
	//event which uses this which should be supported (this means the parent object)
	event testE2: function() {
		this.testB = true
	}
	
	function testFnc(a) {
		print("test")
		this.testI = a
	}
	
	function errorTestFnc() {
		//let's see if it fails correctly
		this.nonExistent()
	}
	
	const function readString() {
		return this.testS
	}
	
	function testEventCallback(a, b) {
		if (a != 2 || b != "hello") {
			throw "wrong arguments: " + a + " " + b
		}
		Document.testI = 0
	}
	
	Data {
		.name: "DocumentObject"
		property int test: 10
	}
	
	Imported {
		.name: "ImportTest"
		
		property int annothertest: 4
		
		Data {
			.name: "DefaultChild"
			
			.onCreated: function() {
				Document.created = true
			}
		}
	}
	
	Data {
		.name: "ThisTest"
		
		Data {
			.name: "Sub"
			event test
		}
		
		function assign() {
			this.Sub.test.RegisterCallback(this, "callback")
		}
		
		function callback() {
			if (this.name != "ThisTest") {
				throw "This is " + this.name + " instead of ThisTest"
			}
		}
	}
}